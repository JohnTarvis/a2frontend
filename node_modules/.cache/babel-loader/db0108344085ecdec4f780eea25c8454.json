{"ast":null,"code":"import _regeneratorRuntime from\"/Users/johnsaville/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"/Users/johnsaville/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"/Users/johnsaville/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/johnsaville/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useContext}from\"react\";import'../styles/TagList.css';import ColoredLine from'../common/ColoredLine';import A2Api from\"../api/a2api\";import LoadingSpinner from\"../common/LoadingSpinner\";import PostContext from\"../posts/PostContext\";import $ from'jquery';import TagToggler from\"./TagToggler\";function TagList(){var _useContext=useContext(PostContext),allPosts=_useContext.allPosts,setAllPosts=_useContext.setAllPosts;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),allTags=_useState2[0],setAllTags=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),tagsIncluded=_useState4[0],setTagsIncluded=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),tagsExcluded=_useState6[0],setTagsExcluded=_useState6[1];// const [toggleTags,setToggleTags] = useState(null);\n// const [tagsInfo,setTagsInfo] = useState(null);\nvar tagIncluded='tag-included';var tagExcluded='tag-excluded';useEffect(function getTagsOnMount(){search();},[]);function search(_x){return _search.apply(this,arguments);}function _search(){_search=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params){var result,sorted;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return A2Api.getTags(params);case 2:result=_context.sent;result.tags.sort(function(a,b){return a.tag>b.tag?1:-1;});sorted=result.tags;setAllTags(sorted);setTagsIncluded(sorted);// console.log('==============================================');\n/////////////////////////////////////////////////////////////////////////\n// const tts = [];\n// for(let tag of sorted){\n//     const toggleTag = new ToggleTag(tag);\n//     // console.log('tt===========================',tag);\n//     tts.push(toggleTag);\n// }\n// setToggleTags(tts);\n// console.log('TOGGLETAGS==================================',tts);\n// console.log('toggletags==========================================',toggleTags);\ncase 7:case\"end\":return _context.stop();}}},_callee);}));return _search.apply(this,arguments);}function getAllPostCards(){return document.querySelectorAll('.PostCard');}function displayTaggedClient(e){var target=e.target;TagToggler.toggle(target);if(target.className!='tag')return;var clickedTag=target.innerHTML;var allPostCards=document.querySelectorAll('.PostCard');var _iterator=_createForOfIteratorHelper(allPostCards),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var postCard=_step.value;var postCardId=postCard.id;var tags=postCard.querySelector('.pc-tags').innerHTML;var tagArray=tags.split(/\\W+/);if(!tagArray.includes(clickedTag)){$(postCard).hide();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}function clickHandler(e){if(e.target.id==='test-click'){TagToggler.getTags();$('.PostCard').show();}displayTaggedClient(e);}if(!allTags)return/*#__PURE__*/React.createElement(LoadingSpinner,null);return/*#__PURE__*/React.createElement(\"div\",{className:\"tag-list\",style:{height:window.outerHeight},onClick:function onClick(e){return clickHandler(e);}},/*#__PURE__*/React.createElement(\"h3\",{id:\"test-click\"},\"Popular Tags\"),/*#__PURE__*/React.createElement(ColoredLine,{color:\"white\"}),allTags.map(function(p){return/*#__PURE__*/React.createElement(\"div\",{className:\"tag neutral\",key:p.id,id:'tag-'+p.tag},p.tag);}));}export default TagList;","map":{"version":3,"sources":["/Users/johnsaville/Desktop/frontend/src/tag-list/TagList.js"],"names":["React","useState","useEffect","useContext","ColoredLine","A2Api","LoadingSpinner","PostContext","$","TagToggler","TagList","allPosts","setAllPosts","allTags","setAllTags","tagsIncluded","setTagsIncluded","tagsExcluded","setTagsExcluded","tagIncluded","tagExcluded","getTagsOnMount","search","params","getTags","result","tags","sort","a","b","tag","sorted","getAllPostCards","document","querySelectorAll","displayTaggedClient","e","target","toggle","className","clickedTag","innerHTML","allPostCards","postCard","postCardId","id","querySelector","tagArray","split","includes","hide","clickHandler","show","height","window","outerHeight","map","p"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport '../styles/TagList.css';\nimport ColoredLine from '../common/ColoredLine';\nimport A2Api from \"../api/a2api\";\nimport LoadingSpinner from \"../common/LoadingSpinner\";\n\nimport PostContext from \"../posts/PostContext\";\n\nimport $ from 'jquery';\n\nimport TagToggler from \"./TagToggler\";\n\n\nfunction TagList(){\n\n    const {allPosts,setAllPosts} = useContext(PostContext);\n    const [allTags, setAllTags] = useState(null);\n    const [tagsIncluded,setTagsIncluded] = useState(null);\n    const [tagsExcluded,setTagsExcluded] = useState(null);\n\n    // const [toggleTags,setToggleTags] = useState(null);\n\n    // const [tagsInfo,setTagsInfo] = useState(null);\n\n    const tagIncluded = 'tag-included';\n    const tagExcluded = 'tag-excluded';\n\n    useEffect(function getTagsOnMount() {\n      search();\n    }, []);\n  \n    async function search(params) {\n        // console.log('PARAMS IN TAGLIST ',params);\n        let result = await A2Api.getTags(params);\n        result.tags.sort((a,b)=>{\n            return a.tag > b.tag ? 1 : -1;\n        });\n        const sorted = result.tags;\n\n\n        setAllTags(sorted);\n        setTagsIncluded(sorted);\n\n        // console.log('==============================================');\n\n        /////////////////////////////////////////////////////////////////////////\n        // const tts = [];\n        // for(let tag of sorted){\n        //     const toggleTag = new ToggleTag(tag);\n        //     // console.log('tt===========================',tag);\n        //     tts.push(toggleTag);\n        // }\n        // setToggleTags(tts);\n\n        // console.log('TOGGLETAGS==================================',tts);\n\n        // console.log('toggletags==========================================',toggleTags);\n    }\n\n    function getAllPostCards(){\n        return document.querySelectorAll('.PostCard');\n    }\n\n    function displayTaggedClient(e){\n        const target = e.target;\n        TagToggler.toggle(target);\n        if(target.className != 'tag')return;\n        const clickedTag = target.innerHTML;\n        const allPostCards = document.querySelectorAll('.PostCard');\n        for(let postCard of allPostCards){\n            const postCardId = postCard.id;\n            const tags = postCard.querySelector('.pc-tags').innerHTML;\n            const tagArray = tags.split(/\\W+/);\n            if(!tagArray.includes(clickedTag)){\n                $(postCard).hide();\n            }                        \n        }\n    }\n\n    function clickHandler(e){\n        if(e.target.id==='test-click'){\n            TagToggler.getTags();\n            $('.PostCard').show();\n        }\n        displayTaggedClient(e);\n    }\n\n\n    if (!allTags) return <LoadingSpinner />;\n\n    return <div className='tag-list' style={{\n        height: window.outerHeight \n        }} onClick={(e)=>clickHandler(e)}>\n\n            <h3 id=\"test-click\">Popular Tags</h3>\n            <ColoredLine color=\"white\"/>\n\n            {allTags.map(p => (\n                <div className=\"tag neutral\" key={p.id} id={'tag-'+p.tag}>\n                    {p.tag}\n                </div>\n            ))} \n\n    </div>\n}\n\nexport default TagList;\n\n"]},"metadata":{},"sourceType":"module"}